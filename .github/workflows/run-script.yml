name: Run Test Script Every 5 Minutes
on:
  schedule:
    # Runs every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run-script:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch full history for better conflict resolution
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Run test script
      run: python test_hello.py
      
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Get the default branch name dynamically
        DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
        echo "Default branch: $DEFAULT_BRANCH"
        
        # Check if there are changes to commit
        if git diff --quiet HEAD -- execution_log.csv; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Get current timestamp for commit message
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        # Simple merge strategy with retry logic
        for i in {1..5}; do
          echo "Attempt $i to commit and push"
          
          # Pull latest changes first
          git pull origin $DEFAULT_BRANCH --no-rebase || {
            echo "Pull failed, continuing anyway"
          }
          
          # Stage and commit changes
          git add execution_log.csv
          git commit -m "ðŸš€ Automated execution log update" \
                     -m "âœ… Process Complete - ${TIMESTAMP}" \
                     -m "- Script executed successfully" \
                     -m "- CSV updated with latest timestamp" \
                     -m "[AUTO-COMMIT]" || {
            echo "Nothing to commit or commit failed"
            exit 0
          }
          
          # Try to push
          if git push origin $DEFAULT_BRANCH; then
            echo "Successfully pushed changes"
            exit 0
          else
            echo "Push failed, attempt $i"
            
            # If push failed, reset and try again
            git reset --soft HEAD~1
            
            # Wait before retry (exponential backoff)
            sleep $((i * 3))
          fi
        done
        
        echo "Failed to push after 5 attempts, but script executed successfully"
        exit 0  # Don't fail the entire workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}